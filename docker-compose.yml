version: '2.4'
services:
  php:
    container_name: user-service-api
    build:
      context: ""
      dockerfile: ./docker/php/Dockerfile
    environment:
      XDEBUG_MODE: ${XDEBUG_MODE}
      XDEBUG_CONFIG: ${XDEBUG_CONFIG}
      PHP_IDE_CONFIG: ${PHP_IDE_CONFIG}
    volumes:
      - ./:/var/www
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/php.ini
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
    depends_on:
      - mysql

  nginx:
    container_name: user-service-nginx
    image: nginx:1.19.0
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php

  mysql:
    image: mysql:8.0
    container_name: user-service-mysql
    ports:
      - "127.0.0.1:${DB_PORT}:3306" # define port for local connection
    environment:
      - MYSQL_DATABASE=${DB_DATABASE}
      - MYSQL_USER=${DB_USERNAME}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_TCP_PORT=${DB_PORT}
    volumes:
      - mysql-vol:/var/lib/mysql/

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  mysql-vol:
    driver: local

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
